name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  # Build and release binaries for multiple platforms
  release-binaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get version info
        id: version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "COMMIT=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Build for different platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.Commit=${{ steps.version.outputs.COMMIT }} -X main.Date=${{ steps.version.outputs.DATE }}" -o dist/pkm-sync-linux-amd64 ./cmd
          GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.Commit=${{ steps.version.outputs.COMMIT }} -X main.Date=${{ steps.version.outputs.DATE }}" -o dist/pkm-sync-linux-arm64 ./cmd
          GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.Commit=${{ steps.version.outputs.COMMIT }} -X main.Date=${{ steps.version.outputs.DATE }}" -o dist/pkm-sync-darwin-amd64 ./cmd
          GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.Commit=${{ steps.version.outputs.COMMIT }} -X main.Date=${{ steps.version.outputs.DATE }}" -o dist/pkm-sync-darwin-arm64 ./cmd
          GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.Commit=${{ steps.version.outputs.COMMIT }} -X main.Date=${{ steps.version.outputs.DATE }}" -o dist/pkm-sync-windows-amd64.exe ./cmd

      - name: Create archives
        run: |
          cd dist
          tar -czf pkm-sync-linux-amd64.tar.gz pkm-sync-linux-amd64
          tar -czf pkm-sync-linux-arm64.tar.gz pkm-sync-linux-arm64
          tar -czf pkm-sync-darwin-amd64.tar.gz pkm-sync-darwin-amd64
          tar -czf pkm-sync-darwin-arm64.tar.gz pkm-sync-darwin-arm64
          zip pkm-sync-windows-amd64.zip pkm-sync-windows-amd64.exe

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz *.zip > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Build and push container images using ko
  release-containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up ko
        uses: ko-build/setup-ko@v0.7

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "COMMIT=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build and push container images
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/pkm-sync
          VERSION: ${{ steps.version.outputs.VERSION }}
          COMMIT: ${{ steps.version.outputs.COMMIT }}
          DATE: ${{ steps.version.outputs.DATE }}
        run: |
          # Build and push multi-platform images
          ko build --bare --tags=${{ steps.version.outputs.VERSION }},latest ./cmd